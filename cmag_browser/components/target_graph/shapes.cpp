#include "shapes.h"

inline ShapeInfo::ShapeInfo(const float *floats, uint32_t floatsCount, std::array<uint32_t, ShapeInfo::maxSubShapesCount> subShapesOffsets)
    : floats(floats),
      floatsCount(floatsCount) {

    FATAL_ERROR_IF(floatsCount == 0, "Shape has no vertices");
    FATAL_ERROR_IF(floatsCount % floatsPerVertex != 0, "Shape has incorrect number of vertices. Must be a multiple of ", floatsPerVertex, ".");

    for (uint32_t subShapeIndex = 0; subShapeIndex < maxSubShapesCount; subShapeIndex++) {
        const uint32_t currentVertexOffset = subShapesOffsets[subShapeIndex];

        if (subShapeIndex == 0) {
            FATAL_ERROR_IF(currentVertexOffset != 0, "First subshape offset should be 0");
            subShapesCount++;
            continue;
        }

        SubShape &currentSubShape = subShapes[subShapeIndex];
        SubShape &previousSubShape = subShapes[subShapeIndex - 1];
        if (currentVertexOffset > previousSubShape.vertexOffset) {
            previousSubShape.vertexCount = currentVertexOffset - previousSubShape.vertexOffset;
            currentSubShape.vertexOffset = currentVertexOffset;
            subShapesCount++;
        } else {
            break;
        }
    }

    SubShape &lastSubShape = subShapes[subShapesCount - 1];
    const uint32_t verticesCount = floatsCount / floatsPerVertex;
    lastSubShape.vertexCount = verticesCount - lastSubShape.vertexOffset;

    for (size_t i = 0; i < verticesCount; i += 2) {
        bounds.minX = std::min(bounds.minX, floats[i]);
        bounds.maxX = std::max(bounds.maxX, floats[i]);
        bounds.minY = std::min(bounds.minY, floats[i + 1]);
        bounds.maxY = std::max(bounds.maxY, floats[i + 1]);
    }
}

#define COUNT(arr) (sizeof(arr) / sizeof(arr[0]))
#define ARRAY_WITH_COUNT(arr) (arr), (COUNT(arr))

const static float staticLibVertices[] = {
    1.0f,
    -0.16577777777777733f,
    1.0f,
    0.16555555555555534f,
    0.4142156862745099f,
    0.4f,
    -0.41421568627451f,
    0.4f,
    -1.0f,
    0.16555555555555534f,
    -1.0f,
    -0.16577777777777733f,
    -0.41421568627451f,
    -0.4f,
    0.4142156862745099f,
    -0.4f,
};
const ShapeInfo ShapeInfo::staticLib(ARRAY_WITH_COUNT(staticLibVertices));

const static float executableVertices[] = {
    0.09259589652096345f,
    -0.3988888888888887f,
    0.15379125780553093f,
    -0.39688888888888924f,
    0.21445138269402286f,
    -0.3935555555555564f,
    0.27421944692239064f,
    -0.3891111111111109f,
    0.332738626226583f,
    -0.38377777777777866f,
    0.3900089206066013f,
    -0.37733333333333374f,
    0.44585191793041945f,
    -0.36977777777777876f,
    0.49973238180196233f,
    -0.3613333333333332f,
    0.5514719000892063f,
    -0.3517777777777787f,
    0.6012488849241746f,
    -0.34133333333333366f,
    0.6485280999107943f,
    -0.3297777777777785f,
    0.6933095450490634f,
    -0.31755555555555603f,
    0.7354148082069585f,
    -0.3044444444444442f,
    0.7746654772524533f,
    -0.29022222222222227f,
    0.8108831400535232f,
    -0.27555555555555633f,
    0.8440677966101693f,
    -0.2599999999999998f,
    0.8742194469223905f,
    -0.2437777777777784f,
    0.9013380909901869f,
    -0.22666666666666643f,
    0.9248884924174838f,
    -0.2091111111111117f,
    0.9454058876003568f,
    -0.19111111111111165f,
    0.9625334522747542f,
    -0.17244444444444423f,
    0.9764495985727031f,
    -0.15311111111111209f,
    0.9871543264942011f,
    -0.13355555555555537f,
    0.9946476360392504f,
    -0.11377777777777792f,
    0.9987511150758253f,
    -0.09355555555555639f,
    1.0f,
    -0.07311111111111157f,
    0.998037466547725f,
    -0.052222222222222725f,
    0.993220338983051f,
    -0.03155555555555589f,
    0.9855486173059769f,
    -0.010444444444445034f,
    0.9752007136485283f,
    0.010444444444443757f,
    0.9619982158786797f,
    0.03133333333333266f,
    0.9464763603925066f,
    0.052222222222221504f,
    0.9284567350579842f,
    0.07288888888888828f,
    0.9082961641391618f,
    0.0933333333333331f,
    0.8859946476360394f,
    0.11355555555555452f,
    0.8617305976806424f,
    0.13355555555555543f,
    0.8355040142729702f,
    0.15311111111111075f,
    0.8076717216770735f,
    0.17222222222222228f,
    0.7782337198929525f,
    0.19088888888888833f,
    0.7473684210526312f,
    0.20888888888888846f,
    0.7150758251561102f,
    0.22666666666666646f,
    0.6817127564674392f,
    0.24355555555555508f,
    0.6472792149866184f,
    0.2597777777777778f,
    0.6117752007136488f,
    0.2753333333333331f,
    0.5755575379125777f,
    0.29022222222222227f,
    0.5384478144513827f,
    0.30422222222222217f,
    0.5008028545941121f,
    0.3173333333333328f,
    0.46244424620874236f,
    0.32977777777777717f,
    0.42355040142729705f,
    0.34111111111111037f,
    0.38429973238180226f,
    0.3515555555555555f,
    0.34469223907225666f,
    0.36111111111111105f,
    0.30472792149866157f,
    0.3695555555555554f,
    0.2645851917930415f,
    0.3771111111111105f,
    0.22426404995539673f,
    0.3835555555555554f,
    0.1837644959857272f,
    0.38911111111111096f,
    0.1430865298840318f,
    0.3933333333333331f,
    0.10223015165031257f,
    0.39666666666666595f,
    0.061373773416592226f,
    0.3988888888888886f,
    0.0205173951828721f,
    0.4f,
    -0.02051739518287199f,
    0.4f,
    -0.061373773416592226f,
    0.3988888888888886f,
    -0.10223015165031257f,
    0.39666666666666595f,
    -0.1430865298840318f,
    0.3933333333333331f,
    -0.1837644959857272f,
    0.38911111111111096f,
    -0.22426404995539684f,
    0.3835555555555554f,
    -0.26458519179304163f,
    0.3771111111111105f,
    -0.30472792149866157f,
    0.3695555555555554f,
    -0.34469223907225677f,
    0.36111111111111105f,
    -0.38429973238180226f,
    0.3515555555555555f,
    -0.42355040142729716f,
    0.34111111111111037f,
    -0.46244424620874236f,
    0.32977777777777717f,
    -0.5008028545941121f,
    0.3173333333333328f,
    -0.5384478144513827f,
    0.30422222222222217f,
    -0.5755575379125778f,
    0.29022222222222227f,
    -0.6117752007136488f,
    0.2753333333333331f,
    -0.6472792149866184f,
    0.2597777777777778f,
    -0.6817127564674392f,
    0.24355555555555508f,
    -0.7150758251561102f,
    0.22666666666666646f,
    -0.7473684210526312f,
    0.20888888888888846f,
    -0.7782337198929526f,
    0.19088888888888833f,
    -0.8076717216770736f,
    0.17222222222222228f,
    -0.8355040142729702f,
    0.15311111111111075f,
    -0.8617305976806423f,
    0.13355555555555543f,
    -0.8859946476360395f,
    0.11355555555555452f,
    -0.9082961641391617f,
    0.0933333333333331f,
    -0.9284567350579841f,
    0.07288888888888828f,
    -0.9464763603925067f,
    0.052222222222221504f,
    -0.9619982158786798f,
    0.03133333333333266f,
    -0.9752007136485283f,
    0.010444444444443757f,
    -0.9855486173059768f,
    -0.010444444444445034f,
    -0.993220338983051f,
    -0.03155555555555589f,
    -0.998037466547725f,
    -0.052222222222222725f,
    -1.0f,
    -0.07311111111111157f,
    -0.9987511150758253f,
    -0.09355555555555639f,
    -0.9946476360392504f,
    -0.11377777777777792f,
    -0.9871543264942011f,
    -0.13355555555555537f,
    -0.9764495985727031f,
    -0.15311111111111209f,
    -0.9625334522747543f,
    -0.17244444444444423f,
    -0.9454058876003568f,
    -0.19111111111111165f,
    -0.9248884924174837f,
    -0.2091111111111117f,
    -0.9013380909901868f,
    -0.22666666666666643f,
    -0.8742194469223905f,
    -0.2437777777777784f,
    -0.8440677966101694f,
    -0.2599999999999998f,
    -0.8108831400535232f,
    -0.27555555555555633f,
    -0.7746654772524533f,
    -0.29022222222222227f,
    -0.7354148082069585f,
    -0.3044444444444442f,
    -0.6933095450490634f,
    -0.31755555555555603f,
    -0.6485280999107942f,
    -0.3297777777777785f,
    -0.6012488849241745f,
    -0.34133333333333366f,
    -0.5514719000892063f,
    -0.3517777777777787f,
    -0.4997323818019622f,
    -0.3613333333333332f,
    -0.44585191793041934f,
    -0.36977777777777876f,
    -0.3900089206066014f,
    -0.37733333333333374f,
    -0.3327386262265829f,
    -0.38377777777777866f,
    -0.27421944692239075f,
    -0.3891111111111109f,
    -0.21445138269402286f,
    -0.3935555555555564f,
    -0.15379125780553082f,
    -0.39688888888888924f,
    -0.09259589652096334f,
    -0.3988888888888887f,
    -0.03086529884032141f,
    -0.4f,
    0.03086529884032152f,
    -0.4f,
};
const ShapeInfo ShapeInfo::executable(ARRAY_WITH_COUNT(executableVertices));

const static float sharedLibVertices[] = {
    1.0f,
    -0.19290909090909014f,
    1.0f,
    0.19290909090909114f,
    0.3992914979757083f,
    0.4f,
    -0.3992914979757075f,
    0.4f,
    -1.0f,
    0.19290909090909114f,
    -1.0f,
    -0.19290909090909014f,
    -0.3992914979757075f,
    -0.4f,
    0.3992914979757083f,
    -0.4f,

    0.9493927125506072f,
    -0.13563636363636328f,
    0.9493927125506072f,
    0.13545454545454527f,
    0.39321862348178227f,
    0.32727272727272727f,
    -0.3932186234817816f,
    0.32727272727272727f,
    -0.9493927125506073f,
    0.13545454545454527f,
    -0.9493927125506073f,
    -0.13563636363636328f,
    -0.3932186234817816f,
    -0.32727272727272727f,
    0.39321862348178227f,
    -0.32727272727272727f,
};
const ShapeInfo ShapeInfo::sharedLib(ARRAY_WITH_COUNT(sharedLibVertices), {0, 8});

const static float moduleLibVertices[] = {
    1.0f,
    -0.2121538461538456f,
    1.0f,
    0.21200000000000052f,
    0.38586891875817764f,
    0.4f,
    -0.38586891875817764f,
    0.4f,
    -1.0f,
    0.21200000000000052f,
    -1.0f,
    -0.2121538461538456f,
    -0.38586891875817764f,
    -0.4f,
    0.38586891875817764f,
    -0.4f,

    0.9524206018793862f,
    -0.16338461538461546f,
    0.9524206018793862f,
    0.16338461538461546f,
    0.38039728797430694f,
    0.3384615384615385f,
    -0.38039728797430716f,
    0.3384615384615385f,
    -0.9524206018793863f,
    0.16338461538461546f,
    -0.9524206018793863f,
    -0.16338461538461546f,
    -0.38039728797430716f,
    -0.3384615384615385f,
    0.38039728797430694f,
    -0.3384615384615385f,

    0.9048412037587725f,
    -0.11476923076923046f,
    0.9048412037587725f,
    0.11461538461538445f,
    0.374806708695135f,
    0.27692307692307694f,
    -0.374806708695135f,
    0.27692307692307694f,
    -0.9048412037587724f,
    0.11461538461538445f,
    -0.9048412037587724f,
    -0.11476923076923046f,
    -0.374806708695135f,
    -0.27692307692307694f,
    0.374806708695135f,
    -0.27692307692307694f,
};
const ShapeInfo ShapeInfo::moduleLib(ARRAY_WITH_COUNT(moduleLibVertices), {0, 8, 16});

const static float customTargetVertices[] = {
    1.0f,
    0.4f,
    -1.0f,
    0.4f,
    -1.0f,
    -0.4f,
    1.0f,
    -0.4f,
};
const ShapeInfo ShapeInfo::customTarget(ARRAY_WITH_COUNT(customTargetVertices));

const static float interfaceLibVertices[] = {
    1.0f,
    0.4f,
    -1.0f,
    0.4f,
    -1.0f,
    -0.4f,
    1.0f,
    -0.4f,
};
const ShapeInfo ShapeInfo::interfaceLib(ARRAY_WITH_COUNT(interfaceLibVertices));

const static float objectLibVertices[] = {
    1.0f,
    0.0f,
    0.4999348534201955f,
    0.4f,
    -0.4999348534201955f,
    0.4f,
    -1.0f,
    0.0f,
    -0.4999348534201955f,
    -0.4f,
    0.4999348534201955f,
    -0.4f,
};
const ShapeInfo ShapeInfo::objectLib(ARRAY_WITH_COUNT(objectLibVertices));

const static float unknownLibVertices[] = {
    1.0f,
    -0.11455289304500343f,
    0.8018618549592003f,
    0.2414962010520164f,
    2.220446049250313e-16f,
    0.4f,
    -0.8018618549592001f,
    0.2414962010520164f,
    -1.0f,
    -0.11455289304500343f,
    -0.4450063211125157f,
    -0.4f,
    0.4450063211125159f,
    -0.4f,
};
const ShapeInfo ShapeInfo::unknownLib(ARRAY_WITH_COUNT(unknownLibVertices));
