add_executable(cmag_browser)
target_common_setup(cmag_browser)
target_find_sources_and_add(cmag_browser)
target_include_directories(cmag_browser PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/..)
target_link_libraries(cmag_browser PRIVATE Imgui Stb cmag_core glm)
add_subdirectories()
target_setup_vs_folders(cmag_browser)
setup_vs_folders_for_interface_source(Stb "external" FROM_PROPERTY)
setup_vs_folders_for_interface_source(nlohmann_json "external" FROM_PATHS nlohmann_json.natvis)

install(TARGETS cmag_browser RUNTIME DESTINATION bin)

function(add_asset INPUT_FILE_NAME OUTPUT_FILE_NAME VARIABLE_NAME)
    set(INPUT_FILE "assets/${INPUT_FILE_NAME}")
    header_pack_generate(BINARY cmag_browser "${INPUT_FILE}" "${OUTPUT_FILE_NAME}" VARIABLE "${VARIABLE_NAME}" INPUT_SOURCE_GROUP assets OUTPUT_SOURCE_GROUP generated)
endfunction()
add_asset(Aller_Rg.ttf font.h cmagBrowserFont)
add_asset(folder.png folder_icon.h folderIconPngBytes)
add_asset(cmake_icon.png cmake_icon.h cmakeIconPngBytes)

function(add_shader INPUT_FILE_NAME OUTPUT_FILE_NAME VARIABLE_NAME)
    set(SHADERS_DIR "target_graph/shaders")
    set(INPUT_FILE "${SHADERS_DIR}/${INPUT_FILE_NAME}")
    header_pack_generate(TEXT cmag_browser "${INPUT_FILE}" "${OUTPUT_FILE_NAME}" VARIABLE "${VARIABLE_NAME}" INPUT_SOURCE_GROUP "${SHADERS_DIR}" OUTPUT_SOURCE_GROUP generated)
endfunction()
add_shader("vertex_shader.glsl" "vertex_shader.glsl.h" vertexShaderSource)
add_shader("fragment_shader.glsl" "fragment_shader.glsl.h" fragmentShaderSource)
